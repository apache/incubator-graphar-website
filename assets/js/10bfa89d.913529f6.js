"use strict";(self.webpackChunkapache_website_template=self.webpackChunkapache_website_template||[]).push([[1969],{4466:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>h,contentTitle:()=>n,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=r(1527),t=r(395);const o={slug:"graphs-openlakehouse",title:"Dreaming of Graphs in the Open Lakehouse",authors:["ssinchenko"],tags:["graphar","graphframes","kuzu","lakehouse"],image:"/img/blog/graph-lakehouse/graphs-lakehouse.png",description:"While Open Lakehouse platforms now natively support tables, geospatial data, vectors, and more, property graphs are still missing. In the age of AI and growing interest in Graph RAG, graphs are becoming especially relevant \u2013 there\u2019s a need to deliver Knowledge Graphs to RAG systems, with standards, ETL, and frameworks for different scenarios. There\u2019s a young project, Apache GraphAr (incubating), that aims to define a storage standard. For processing, there is a good tooling already. GraphFrames is like Spark for Iceberg \u2013 batch and scalable on distributed clusters; Kuzu is like DuckDB for Iceberg \u2013 fast, in-memory, and in-process; Apache HugeGraph is like ClickHouse or Doris for graphs \u2013 a standalone server for queries. All the pieces seem to be here\u2014it just remains to put them together. More thoughts in the full post."},n="TLDR;",i={permalink:"/blog/graphs-openlakehouse",editUrl:"https://github.com/apache/incubator-graphar-website/edit/main/blog/2025-09-03-graphs-openlakehouse.mdx",source:"@site/blog/2025-09-03-graphs-openlakehouse.mdx",title:"Dreaming of Graphs in the Open Lakehouse",description:"While Open Lakehouse platforms now natively support tables, geospatial data, vectors, and more, property graphs are still missing. In the age of AI and growing interest in Graph RAG, graphs are becoming especially relevant \u2013 there\u2019s a need to deliver Knowledge Graphs to RAG systems, with standards, ETL, and frameworks for different scenarios. There\u2019s a young project, Apache GraphAr (incubating), that aims to define a storage standard. For processing, there is a good tooling already. GraphFrames is like Spark for Iceberg \u2013 batch and scalable on distributed clusters; Kuzu is like DuckDB for Iceberg \u2013 fast, in-memory, and in-process; Apache HugeGraph is like ClickHouse or Doris for graphs \u2013 a standalone server for queries. All the pieces seem to be here\u2014it just remains to put them together. More thoughts in the full post.",date:"2025-09-03T00:00:00.000Z",formattedDate:"September 3, 2025",tags:[{label:"graphar",permalink:"/blog/tags/graphar"},{label:"graphframes",permalink:"/blog/tags/graphframes"},{label:"kuzu",permalink:"/blog/tags/kuzu"},{label:"lakehouse",permalink:"/blog/tags/lakehouse"}],readingTime:13.385,hasTruncateMarker:!0,authors:[{name:"Sem Sinchenko",title:"Maintainer of GraphAr",url:"https://semyonsinchenko.github.io/ssinchenko/",imageURL:"https://avatars.githubusercontent.com/u/29755009",key:"ssinchenko"}],frontMatter:{slug:"graphs-openlakehouse",title:"Dreaming of Graphs in the Open Lakehouse",authors:["ssinchenko"],tags:["graphar","graphframes","kuzu","lakehouse"],image:"/img/blog/graph-lakehouse/graphs-lakehouse.png",description:"While Open Lakehouse platforms now natively support tables, geospatial data, vectors, and more, property graphs are still missing. In the age of AI and growing interest in Graph RAG, graphs are becoming especially relevant \u2013 there\u2019s a need to deliver Knowledge Graphs to RAG systems, with standards, ETL, and frameworks for different scenarios. There\u2019s a young project, Apache GraphAr (incubating), that aims to define a storage standard. For processing, there is a good tooling already. GraphFrames is like Spark for Iceberg \u2013 batch and scalable on distributed clusters; Kuzu is like DuckDB for Iceberg \u2013 fast, in-memory, and in-process; Apache HugeGraph is like ClickHouse or Doris for graphs \u2013 a standalone server for queries. All the pieces seem to be here\u2014it just remains to put them together. More thoughts in the full post."},unlisted:!1,nextItem:{title:"Welcome to GraphAr",permalink:"/blog/demo-blog-post"}},h={authorsImageUrls:[void 0]},l=[];function p(e){const a={a:"a",em:"em",p:"p",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.p,{children:(0,s.jsxs)(a.em,{children:["Initialy published in ",(0,s.jsx)(a.a,{href:"https://semyonsinchenko.github.io/ssinchenko/post/dreams-about-graph-in-lakehouse/",children:"Sem Sinchenko's blog"})]})}),"\n",(0,s.jsx)(a.p,{children:"While Open Lakehouse platforms now natively support tables, geospatial data, vectors, and more, property graphs are still missing. In the age of AI and growing interest in Graph RAG, graphs are becoming especially relevant \u2013 there\u2019s a need to deliver Knowledge Graphs to RAG systems, with standards, ETL, and frameworks for different scenarios. There\u2019s a young project, Apache GraphAr (incubating), that aims to define a storage standard. For processing, there is a good tooling already. GraphFrames is like Spark for Iceberg \u2013 batch and scalable on distributed clusters; Kuzu is like DuckDB for Iceberg \u2013 fast, in-memory, and in-process; Apache HugeGraph is like ClickHouse or Doris for graphs \u2013 a standalone server for queries. I\u2019m currently working also on graphframes-rs to bring Apache DataFusion and its ecosystem into this picture. All the pieces seem to be here \u2013 it just remains to put them together."})]})}function g(e={}){const{wrapper:a}={...(0,t.a)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},395:(e,a,r)=>{r.d(a,{Z:()=>i,a:()=>n});var s=r(959);const t={},o=s.createContext(t);function n(e){const a=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:n(e.components),s.createElement(o.Provider,{value:a},e.children)}}}]);