"use strict";(self.webpackChunkapache_website_template=self.webpackChunkapache_website_template||[]).push([[9022],{9265:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(1527),t=n(395);const o={id:"getting-started",title:"Getting Started with Info Module",sidebar_position:1},i="Getting Started with Info Module",s={id:"libraries/java/info/getting-started",title:"Getting Started with Info Module",description:"This article is a quick guide that explains how to work with GraphAr Java Info module. The Info module is part of the pure Java implementation of GraphAr and provides capabilities for parsing graph metadata (schema) from YAML files.",source:"@site/docs/libraries/java/info/getting-started.md",sourceDirName:"libraries/java/info",slug:"/libraries/java/info/getting-started",permalink:"/docs/libraries/java/info/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/incubator-graphar/edit/main/docs/libraries/java/info/getting-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"getting-started",title:"Getting Started with Info Module",sidebar_position:1},sidebar:"documentation",previous:{title:"Java Library",permalink:"/docs/libraries/java/"},next:{title:"Getting Started with java FFI Module",permalink:"/docs/libraries/java/java-FFI/getting-started"}},l={},d=[{value:"metadata Files",id:"metadata-files",level:2},{value:"How to Use GraphAr Java Info Module",id:"how-to-use-graphar-java-info-module",level:2},{value:"Load graph Info",id:"load-graph-info",level:3},{value:"Load GraphInfo from local file system",id:"load-graphinfo-from-local-file-system",level:4},{value:"Custom YAML Loader Implementation",id:"custom-yaml-loader-implementation",level:4},{value:"Save Graph Info",id:"save-graph-info",level:3},{value:"Building",id:"building",level:3}];function h(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h1,{id:"getting-started-with-info-module",children:"Getting Started with Info Module"}),"\n",(0,r.jsx)(a.p,{children:"This article is a quick guide that explains how to work with GraphAr Java Info module. The Info module is part of the pure Java implementation of GraphAr and provides capabilities for parsing graph metadata (schema) from YAML files."}),"\n",(0,r.jsx)(a.h2,{id:"metadata-files",children:"metadata Files"}),"\n",(0,r.jsxs)(a.p,{children:["GraphAr uses a group of information files to save the metadata for a graph. For more information, see ",(0,r.jsx)(a.a,{href:"https://graphar.apache.org/docs/specification/format#information-files",children:"GraphAr Format Specification"}),"."]}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"java-info"})," module provides the function of reading and parsing information files"]}),"\n",(0,r.jsx)(a.h2,{id:"how-to-use-graphar-java-info-module",children:"How to Use GraphAr Java Info Module"}),"\n",(0,r.jsx)(a.h3,{id:"load-graph-info",children:"Load graph Info"}),"\n",(0,r.jsx)(a.h4,{id:"load-graphinfo-from-local-file-system",children:"Load GraphInfo from local file system"}),"\n",(0,r.jsx)(a.p,{children:"Here's a simple example of how to use the java-info module:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'import org.apache.graphar.info.GraphInfo;\nimport org.apache.graphar.info.loader.GraphInfoLoader;\nimport org.apache.graphar.info.loader.impl.LocalFileSystemStreamGraphInfoLoader;\nimport java.nio.file.Paths;\n\n// Load graph info from a YAML file\nGraphInfoLoader loader = new LocalFileSystemStreamGraphInfoLoader();\nGraphInfo graphInfo = loader.loadGraphInfo(Paths.get("path/to/graph.yml").toUri());\n\n// Access graph metadata\nString graphName = graphInfo.getName();\nList<VertexInfo> vertices = graphInfo.getVertexInfos();\nList<EdgeInfo> edges = graphInfo.getEdgeInfos();\n\n// Access vertex metadata\nVertexInfo personVertex = vertices.get(0);\nString vertexType = personVertex.getType();\nlong chunkSize = personVertex.getChunkSize();\n\n// Access edge metadata\nEdgeInfo knowsEdge = edges.get(0);\nString edgeType = knowsEdge.getEdgeType();\nboolean isDirected = knowsEdge.isDirected();\n'})}),"\n",(0,r.jsx)(a.h4,{id:"custom-yaml-loader-implementation",children:"Custom YAML Loader Implementation"}),"\n",(0,r.jsxs)(a.p,{children:["The java-info module requires users to implement their own YAML reading interface, because we typically face data lakes where data may be stored anywhere (local file or HDFS or S3 or OSS...). Users can implement one or more of ",(0,r.jsx)(a.code,{children:"StringGraphInfoLoader"}),", ",(0,r.jsx)(a.code,{children:"ReaderGraphInfoLoader"}),", or ",(0,r.jsx)(a.code,{children:"StreamGraphInfoLoader"})," (a local file system implementation is already provided)."]}),"\n",(0,r.jsxs)(a.p,{children:["Here's an example of how to implement a custom YAML loader by extending the ",(0,r.jsx)(a.code,{children:"StringGraphInfoLoader"})," abstract class:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'import org.apache.graphar.info.loader.StringGraphInfoLoader;\nimport java.io.IOException;\nimport java.net.URI;\n\npublic class MyStringGraphInfoLoader extends StringGraphInfoLoader {\n    @Override\n    public String readYaml(URI uri) throws IOException {\n        // Implement your custom logic to read YAML from any source\n        // This example shows reading from a database, but it could be HTTP, S3, HDFS, etc.\n        \n        // Example: Read from a database based on URI path\n        String path = uri.getPath();\n        // Query database for YAML content\n        return readYamlFromDatabase(path);\n    }\n    \n    private String readYamlFromDatabase(String path) throws IOException {\n        // Your database access logic here\n        // This is just a placeholder implementation\n        // In a real implementation, you would connect to your database\n        // and retrieve the YAML content based on the path\n        \n        // For example:\n        // Connection conn = DriverManager.getConnection(dbUrl, username, password);\n        // PreparedStatement stmt = conn.prepareStatement("SELECT yaml_content FROM graphs WHERE id = ?");\n        // stmt.setString(1, path);\n        // ResultSet rs = stmt.executeQuery();\n        // if (rs.next()) {\n        //     return rs.getString("yaml_content");\n        // }\n        \n        // Placeholder return\n        return "name: example\\ntype: graph\\nversion: v1";\n    }\n}\n\n// Usage of the custom loader\nMyStringGraphInfoLoader customLoader = new MyStringGraphInfoLoader();\nGraphInfo graphInfo = customLoader.loadGraphInfo(URI.create("db://mydatabase/graphs/graph1/graph.yml"));\n'})}),"\n",(0,r.jsx)(a.h3,{id:"save-graph-info",children:"Save Graph Info"}),"\n",(0,r.jsxs)(a.p,{children:["The java-info module also provides functionality to save graph metadata to YAML files using the ",(0,r.jsx)(a.code,{children:"GraphSaver"})," interface. Here's an example of how to use it:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'import org.apache.graphar.info.GraphInfo;\nimport org.apache.graphar.info.saver.GraphInfoSaver;\nimport org.apache.graphar.info.saver.impl.LocalFileSystemYamlGraphSaver;\nimport java.net.URI;\n\n// Create or obtain a GraphInfo object\nGraphInfo graphInfo = createOrLoadGraphInfo(); // your method to create or load GraphInfo\n\n// Create a GraphSaver instance\nGraphInfoSaver graphSaver = new LocalFileSystemYamlGraphSaver();\n\n// Save the graph info to a directory\nString savePath = "/path/to/save/directory";\ntry {\n    graphSaver.save(URI.create(savePath), graphInfo);\n    System.out.println("Graph info saved successfully to " + savePath);\n} catch (IOException e) {\n    System.err.println("Failed to save graph info: " + e.getMessage());\n    e.printStackTrace();\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"This will save the graph metadata as a set of YAML files:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["One main graph YAML file (e.g., ",(0,r.jsx)(a.code,{children:"graph-name.graph.yaml"}),")"]}),"\n",(0,r.jsxs)(a.li,{children:["One YAML file for each vertex type (e.g., ",(0,r.jsx)(a.code,{children:"person.vertex.yaml"}),")"]}),"\n",(0,r.jsxs)(a.li,{children:["One YAML file for each edge type (e.g., ",(0,r.jsx)(a.code,{children:"person_knows_person.edge.yaml"}),")"]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"Alternatively, you can use the dump method to convert graph info to a string and store it anywhere:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'import org.apache.graphar.info.GraphInfo;\nimport org.apache.graphar.info.EdgeInfo;\nimport org.apache.graphar.info.VertexInfo;\nimport java.net.URI;\n\n// Create or obtain a GraphInfo object\nGraphInfo graphInfo = createOrLoadGraphInfo(); // your method to create or load GraphInfo\n\n// Set custom storage URIs for vertex and edge info files\nfor (VertexInfo vertexInfo : graphInfo.getVertexInfos()) {\n    graphInfo.setStoreUri(vertexInfo, URI.create("db://path/vertex/" + vertexInfo.getType() + ".vertex.yaml"));\n}\n\nfor (EdgeInfo edgeInfo : graphInfo.getEdgeInfos()) {\n    graphInfo.setStoreUri(edgeInfo, URI.create("db://path/edge/" + edgeInfo.getConcat() + ".edge.yaml"));\n}\n\n// Convert graph info to YAML string\nString graphYamlString = graphInfo.dump();\n\n// Now you can store the YAML string anywhere you want\n// For example, save to a database, send over network, etc.\nsaveYamlStringToDatabase(graphYamlString);\n'})}),"\n",(0,r.jsx)(a.h3,{id:"building",children:"Building"}),"\n",(0,r.jsx)(a.p,{children:"To build the graphar-info module, you need:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"JDK 11 or higher"}),"\n",(0,r.jsx)(a.li,{children:"Maven 3.5 or higher"}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"Build the module with Maven:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"cd maven-projects/info\nmvn clean install\n"})})]})}function p(e={}){const{wrapper:a}={...(0,t.a)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},395:(e,a,n)=>{n.d(a,{Z:()=>s,a:()=>i});var r=n(959);const t={},o=r.createContext(t);function i(e){const a=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:a},e.children)}}}]);